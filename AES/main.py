# !/usr/bin/env python
# -*-coding:utf-8 -*-

"""
# File       : aes_funcs.py
# Time       ：2021/10/19 8:19
# Author     ：wangting000
# version    ：python 3.9
# Description：functions used in AES algorithm
"""

import numpy as np
import copy
import AES_enc
import AES_dec

###相关变量设置##############################
row = 4
col = 4
l = 8

#####################################PlainKey#######################################
PlainKey = [0x2b, 0x7e, 0x15, 0x16,
            0x28, 0xae, 0xd2, 0xa6,
            0xab, 0xf7, 0x15, 0x88,
            0x09, 0xcf, 0x4f, 0x3c]
PlainKey = [str(hex(i)) for i in PlainKey]
# 把每一个十六进制数字的'0x'去掉并补齐至两位
for i in range(len(PlainKey)):
    st = PlainKey[i].find('x')
    PlainKey[i] = PlainKey[i][st+1:]
    while len(PlainKey[i]) < 2:
        PlainKey[i] = '0' + PlainKey[i]

#####################################S_box#########################################
S_box = [[0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
         [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
         [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
         [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
         [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
         [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
         [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
         [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
         [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
         [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
         [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
         [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
         [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
         [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
         [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
         [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]]

S_box_reverse = [[0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB],
                 [0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB],
                 [0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E],
                 [0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25],
                 [0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92],
                 [0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84],
                 [0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06],
                 [0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B],
                 [0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73],
                 [0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E],
                 [0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B],
                 [0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4],
                 [0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F],
                 [0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF],
                 [0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61],
                 [0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D]]

####################################PlainText######################################

PlainText = [[0xd4,0xe0,0xb8,0x1e],
     [0xbf,0xb4,0x41,0x27],
     [0x5d,0x52,0x11,0x98],
     [0x30,0xae,0xf1,0xe5]]

##################################列混淆矩阵########################################
m=[['0010','0011','0001','0001'],   #[[0x0e, 0x0b, 0x0d, 0x09],
   ['0001','0010','0011','0001'],   # [0x09, 0x0e, 0x0b, 0x0d],
   ['0001','0001','0010','0011'],   # [0x0d, 0x09, 0x0e, 0x0b],
   ['0011','0001','0001','0010']]   # [0x0b, 0x0d, 0x09, 0x0e]]

rev_m = [['1110','1011','1101','1001'],  #rev_m = [[0x0e, 0x0b, 0x0d, 0x09],
         ['1001', '1110', '1011', '1101'],        #[0x09, 0x0e, 0x0b, 0x0d],
         ['1101', '1001', '1110', '1011'],        #[0x0d, 0x09, 0x0e, 0x0b],
         ['1011', '1101', '1001', '1110']]        #[0x0b, 0x0d, 0x09, 0x0e]]

##########################密钥扩展#################################################
extendKey = AES_enc.extend_key(PlainKey, S_box)
print('the Extended keys:',extendKey)

for i in range(len(extendKey)):
    extendKey[i] = list(extendKey[i])
    extendKey[i] = extendKey[i][2:] # 格式为['a','0','f','a','f','e','1','7']
    extendKey[i] = ''.join(extendKey[i]) # 格式为'a0fafe17'

## 轮秘钥加--------

tot = extendKey[0] + extendKey[1] + extendKey[2] + extendKey[3]
key = np.zeros((row,col)).tolist()

for i in range(row):
    for j in range(col):
        index = i*col + j
        key[i][j] = '0x' + tot[index*2:index*2+2] # 格式为'0xa0'
        key[i][j] = eval(key[i][j])

Res_add = AES_enc.add_layer(PlainText, key)

print('轮秘钥加：',Res_add)

# -----------前九轮加密---------
for kkk in range(1,10):
    print('----------------------------------------------------------第%d轮加密----------------------------------------------------' % (kkk))
    tot = extendKey[kkk*4] + extendKey[kkk*4+1] + extendKey[kkk*4+2] + extendKey[kkk*4+3]
    key = np.zeros((row, col)).tolist()

    for i in range(row):
        for j in range(col):
            index = i * col + j
            key[i][j] = '0x' + tot[index * 2:index * 2 + 2]  # 格式为'0xa0'
            key[i][j] = eval(key[i][j])

    # 字节代替
    Res_map = AES_enc.map_layer(Res_add, S_box)
    print('字节代替：', Res_map)
    # 行位移
    Res_row = AES_enc.shift_rows(Res_map)
    print('行位移：', Res_row)
    # 列混淆
    Res_col = AES_enc.mix_columns(Res_row, m)
    print('列混淆：', Res_col)
    # 轮秘钥加
    Res_add = AES_enc.add_layer(Res_col, key)
    print('轮秘钥加：', Res_add)



# -------------第十轮----------
print('----------------------------------------------------------第10轮加密----------------------------------------------------')
tot = extendKey[40] + extendKey[41] + extendKey[42] + extendKey[43]
key = np.zeros((row, col)).tolist()

for i in range(row):
    for j in range(col):
        index = i * col + j
        key[i][j] = '0x' + tot[index * 2:index * 2 + 2]  # 格式为'0xa0'
        key[i][j] = eval(key[i][j])

# 字节代替
Res_map = AES_enc.map_layer(Res_add, S_box)
print('字节代替：', Res_map)
# 行位移
Res_row = AES_enc.shift_rows(Res_map)
print('行位移：', Res_row)
# 轮秘钥加
Res_add = AES_enc.add_layer(Res_row, key)
print('轮秘钥加：', Res_add)


####################################解密####################################
###########################################################################
# 轮密钥加-------------------
print('****************************开始解密*****************************************')
print('****************************************************************************')
Res_add = AES_enc.add_layer(Res_add, key)
print('轮密钥加：',Res_add)

# -----------前九轮解密---------
for kkk in [_ for _ in range(9,0,-1)]: #987654321
    print('----------------------------------------------------------第%d轮解密----------------------------------------------------' % (kkk+1))
    tot = extendKey[kkk*4] + extendKey[kkk*4+1] + extendKey[kkk*4+2] + extendKey[kkk*4+3]
    key = np.zeros((row, col)).tolist()

    for ii in range(row):
        for j in range(col):
            index = ii * col + j
            key[ii][j] = '0x' + tot[index * 2:index * 2 + 2]  # 格式为'0xa0'
            key[ii][j] = eval(key[ii][j])

    # 逆行位移
    Res_de_row = AES_dec.de_shift_rows(Res_add)
    print('逆行位移：', Res_de_row)
    # 逆字节代换
    Res_de_map = AES_dec.de_map_layer(Res_de_row,S_box_reverse)
    print('逆字节 ：', Res_de_map)
    # 轮秘钥加
    Res_add = AES_enc.add_layer(Res_de_map, key)
    print('轮秘钥加：', Res_add)
    # 逆列混合
    Res_de_column = AES_enc.mix_columns(Res_add, rev_m)
    print('逆列混合：', Res_de_column)
    Res_add = copy.copy(Res_de_column)

#  --round 1----------
tot = extendKey[0] + extendKey[1] + extendKey[2] + extendKey[3]
key = np.zeros((row, col)).tolist()
for i in range(row):
    for j in range(col):
        index = i * col + j
        key[i][j] = '0x' + tot[index * 2:index * 2 + 2]  # 格式为'0xa0'
        key[i][j] = eval(key[i][j])
print('----------------------------------------------------------第1轮解密----------------------------------------------------')
# 逆行位移
Res_de_row = AES_dec.de_shift_rows(Res_add)
print('行位移：', Res_de_row)
# 逆字节代换
Res_de_map = AES_dec.de_map_layer(Res_de_row,S_box_reverse)
print('逆字节 ：', Res_de_map)
# 轮秘钥加
Res_add = AES_enc.add_layer(Res_de_map, key)
print('轮秘钥加：(解密结果)', Res_add)
for i in range(row):
    for j in range(col):
        PlainText[i][j] = hex(PlainText[i][j])
print('PlainText:',PlainText)




